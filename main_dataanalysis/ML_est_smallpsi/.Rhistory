install.packages(c("ade4", "callr", "digest", "ggformula", "ggpubr", "plotly", "ps"))
install.packages(c("digest", "modelr", "sp", "vctrs"))
install.packages(c("broom", "cli", "forcats", "gridGraphics", "mvtnorm", "rlang", "sp", "tinytex"))
installed.packages(DAPC)
??dapc
library("adegenet", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
vignette("adegenet-dapc")
dapc
?dapc
?is.null
is.null(NULL)
is.null(0)
125000/4
125000*4
500000/6
84000
84000*6
install.packages(c("classInt", "lubridate", "multcomp", "sf", "spData"))
load("/datadisk/git/maize-pathogen/analysis/basic_popgen/gendiv_sw100kb_rec_withFST.RData")
gen_div
head(gen_div[[1]])
t1 <- gen_div$`Tajima's D (per 100 KB)`
t1 <- t1[,scaff=7]
t1 <- t1[,scaff=2]
t1 <- t1[,scaff=10]
t1 <- t1[,scaff=3]
t1 <- t1[,t1[,scaff]==7]
t1 <- t1[,t1[,"scaff"]==7]
t1 <- t1[t1[,"scaff"]==7,]
t1 <- gen_div$`Tajima's D (per 100 KB)`
t1 <- t1[t1[,"scaff"]==7,]
t1
1967886/100000
t1 <- gen_div$`Nucleotide diversity (per 100 KB)`
t1 <- t1[t1[,"scaff"]==7,]
t1
t1 <- gen_div$`CLR (per 100 KB)`
t1 <- t1[t1[,"scaff"]==7,]
t1
t1 <- gen_div$`CLR (per 100 KB)`
ecdf(t1[,"BC"])(12.42)
t1 <- gen_div$`Nucleotide diversity (per 100 KB)`
ecdf(t1[,"BC"])(8.4*10^(-6))
t1 <- gen_div$`Tajima's D (per 100 KB)`
ecdf(t1[,"BC"])(-1.26)
t1 <- gen_div$`Haplotype diversity (per 100 KB)`
t1
t1 <- gen_div$`Haplotype diversity (per 100 KB)`
t1 <- t1[t1[,"scaff"]==7,]
t1
t1 <- gen_div$`Haplotype diversity (per 100 KB)`
ecdf(t1[,"BC"])(0.65)
load("/datadisk/droppo/Dropbox/Fabian/OC_n/abc_res_rev/lda_rep1_m12_all_n100lda.RData")
lda_params[[1]]
lda_params[[1]]$scaling
install.packages("usethis")
1.99*1.2^beta(0.01,1.99)
1.99*1.2^(-1.99)*beta(0.01,1.99)
1.99*1.2^(-1.99)*beta(0.01,1.99)
f1 <- function(N1,N2,a){N1^a/N2^a}
#' Changed after prior growth change (for Stucki 2015 and Eldh 2015/98)
best_fit <- c(rep(2,4),1,rep(2,3),3,2,1,2,2,rep(3,3),rep(2,4),1,1,1)
=cor
?cor
install.packages(c("deldir", "stringdist"))
install.packages(c("assertive", "assertive.reflection", "raster", "RcppArmadillo", "rehh"))
load("/datadisk/git/imp_vs_select/simulation_msprime/sims/droso_sims_positions_set10.RData")
pos1_list
pos1_list[[1]][1:10]
pos1_list[[2]][1:10]
load("/datadisk/git/imp_vs_select/simulation_msprime/sims/droso_sims_positions_set9.RData")
pos1_list[[2]][1:10]
knitr::opts_chunk$set(echo = TRUE)
library(readr)
#msprime params
run_list <- 1:500 #We produce 500 neutral sims
sample_size <- 100
chrom_size <- 25.29*10^(6)
mu_per_g_bp <- 4.65*10^(-9)
r_per_g_bp <- 10^(-9)
Ne <- 100000 #This is just an arbitrary setting, we need sth. more realistic
#Ne is diploid effective population size
random_seeds_seed <- 44 #If we want
random_seed <- sample(10000000,500)
for (run in run_list){
#msprime command
com1 <- paste("msp simulate --length",chrom_size,"--recombination-rate",r_per_g_bp,
"--mutation-rate",mu_per_g_bp,"--effective-population-size",Ne,
"--random-seed",random_seed[run],sample_size,
paste0("sims/sim_droso_run",run,".mspr"))
#Run it
system(com1)
}
#
#Matrices should be sparse (SFS is dominated by singleton mutations)
#So we save them as sparse matrices to save space
library(textTinyR)
#library(Matrix)
#object w. all neutral SNP sets (w/o pos)
#data1_list <- vector("list",length(run_list))
#object w. pos for each SNP set
#pos1_list <- vector("list",length(run_list))
#extract variants
for (runset in 1:10){
counter_run <- 0
data1_list <- vector("list",50)
pos1_list <- vector("list",50)
for (run in run_list[(runset-1)*50+(1:50)]){
cat("run",run,"\n")
counter_run <- counter_run + 1
data0 <- system(paste0("msp variants sims/sim_droso_run",run,".mspr"),intern = TRUE)
#Transform into data frame
data1 <- strsplit(data0,"\t")
pos1 <- sapply(data1,function(l){round(as.numeric(l[1]))}) #Pos must be in integer bp
keep_pos <- !(duplicated(pos1)) #Get all duplicate bp positions
pos1 <- pos1[keep_pos] #Remove all duplicate positions
sims1 <- sapply(data1,
function(l){as.integer(strsplit(l[2],"")[[1]])})
sims1 <- sims1[,keep_pos] #Remove all duplicate positions
#data3 <- data.frame(pos1,t(sims1))
sims_sparse <- dense_2sparse(t(sims1))
#matrix_sparsity(sims_sparse)
#data1 <- sims_sparse
data1_list[[counter_run]] <- sims_sparse
pos1_list[[counter_run]] <- pos1
#save_sparse_binary(data1,file_name = paste0("sims/droso_sims",
#                      run,".RData"))
rm(data0,pos1,sims1,sims_sparse,keep_pos)}
save(data1_list,file = paste0("sims/droso_sims_set",runset
,".RData"),compress = "xz")
save(pos1_list,file=paste0("sims/droso_sims_positions_set",
runset,".RData"),compress="xz")
}
system(paste0("rm sims/sim_droso_run",run,".mspr"))
system("rm sims/sim_droso_run*.mspr")
install.packages(c("psych", "rvest"))
IFs_since2015 <- c(21.112,NA,1.531,1.988,1.529,14.679,0.522)
sum(IFs_since2015,na.rm = TRUE)
IFs_since2015b <- c(21.55,NA,1.531,1.988,1.529,14.679,0.522)
sum(IFs_since2015b,na.rm = TRUE)
IFs_since2015b <- c(24.55,NA,1.531,1.988,1.529,14.679,0.522)
sum(IFs_since2015b,na.rm = TRUE)
install.packages("DT")
(6*1479.48)+2*2318.21
((6*1479.48)+2*2318.21)/12
install.packages(c("backports", "BDgraph", "conquer", "dplyr", "glue", "libcoin", "maptools", "pbapply", "tidyr", "zip"))
library(PopGenome)
?read.big.fasta
?readData
droso_chr2 <- read.big.fasta("Dmel_RAL_Chr2R_subset100random.fa",SNP.DATA = FALSE,window = 100000,FAST = TRUE,big.data = TRUE)
droso_chr2 <- neutrality.stats(droso_chr2)
summary(droso_chr2@n.biallelic.sites)
library(pegas)
?read.dna
test2 <- read.dna("Dmel_RAL_Chr2R_subset100random.fa",format = "fasta")
test2
length(seg.sites(test2))
?seg.sites
length(seg.sites(test2,strict = TRUE))
length(seg.sites(test2,trailingGapsAsN = FALSE))
length(seg.sites(test2,trailingGapsAsN = TRUE))
?theta.s
theta <- theta.s(S,nrow(test2))
S <- length(seg.sites(test2))
theta <- theta.s(S,nrow(test2))
droso_chr2 <- read.dna("Dmel_RAL_Chr2R_subset100random.fa",format = "fasta")
S <- length(seg.sites(test2))
theta_per_bp <- theta.s(S,nrow(droso_chr2))/ncol(droso_chr2)
mu <- 4.65*10^(-9)#From literature
ploid_param <- 2
Ne <- theta_per_bp/(2*ploid_param*mu)
Ne <- theta_per_bp/(2*ploid_param*mu)
ploid_param <- 1#2 We take isofemale lines?
Ne <- theta_per_bp/(2*ploid_param*mu)
#' R libraries for parallelization and reading in .xlsx
library(doMC)
rho <- 2*r_per_g_bp*ploid_param*Ne
r_per_g_bp <- 10^(-9)
rho <- 2*r_per_g_bp*ploid_param*Ne
save(S,sample_size,chrom_size,theta_per_bp,mu_per_g_bp,r_per_g_bp,
ploid_param,Ne,rho,file="popgenparams_drosochr2.RData")
source('/datadisk/git/multiplemerger-project/data_analysis_current/pics.R')
setwd("/datadisk/git/multiplemerger-project/data_analysis_current")
source('/datadisk/git/multiplemerger-project/data_analysis_current/pics.R')
source('/datadisk/git/multiplemerger-project/data_analysis_current/pics.R')
#' Phi table params, psi presented differently because we parallelize the phi table computation
n_psis <- 20
psi_steps <- 0.4*(0:n_psis)/n_psis
#' Phi table params, psi presented differently because we parallelize the phi table computation
n_psis <- 40
psi_steps <- 0.4*(0:n_psis)/n_psis
rhos <- c(0,25,50)
misi <- c(0,.15,15)
source('/datadisk/git/multiplemerger-project/data_analysis_current/ML_wrapper.R')
#' Phi table params, psi presented differently because we parallelize the phi table computation
n_psis <- 20
psi_steps <- 0.2*(0:n_psis)/n_psis
source('/datadisk/git/multiplemerger-project/data_analysis_current/pics.R')
setwd("/datadisk/git/multiplemerger-project/data_analysis_current")
source('/datadisk/git/multiplemerger-project/data_analysis_current/pics.R')
source('/datadisk/git/multiplemerger-project/data_analysis_current/ML_wrapper.R')
load("/datadisk/git/multiplemerger-project/data_analysis_current/ML_est_smallpsi/ML_ZebraFinch_SFS.txt")
#' Phi table params, psi presented differently because we parallelize the phi table computation
n_psis <- 20
psi_steps <- 0.2*(0:n_psis)/n_psis
min(psi_steps)
max(psi_steps)
