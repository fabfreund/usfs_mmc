install.packages(c("ade4", "callr", "digest", "ggformula", "ggpubr", "plotly", "ps"))
phitab_beta <- list.files("phi_tables_beta/")
minentry <- vector("numeric",length = length(phitab_beta))
names(minentry) <- phitab_beta
for (phit in phitab_beta){
phit2 <-  read.delim(paste0("phi_tables_beta/",phit),header=FALSE)
minentry[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
min(minentry)
phitab_psi <- list.files("phi_tables_psi/")
minentry2 <- vector("numeric",length = length(phitab_psi))
names(minentry2) <- phitab_psi
for (phit in phitab_psi){
phit2 <-  read.delim(paste0("phi_tables_psi/",phit),header=FALSE)
minentry2[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
summary(minentry2)
setwd("/datadisk/git/multiplemerger-project/data_analysis_2019")
phitab_beta <- list.files("phi_tables_beta/")
minentry <- vector("numeric",length = length(phitab_beta))
names(minentry) <- phitab_beta
for (phit in phitab_beta){
phit2 <-  read.delim(paste0("phi_tables_beta/",phit),header=FALSE)
minentry[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
min(minentry)
phitab_psi <- list.files("phi_tables_psi/")
minentry2 <- vector("numeric",length = length(phitab_psi))
names(minentry2) <- phitab_psi
for (phit in phitab_psi){
phit2 <-  read.delim(paste0("phi_tables_psi/",phit),header=FALSE)
minentry2[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
summary(minentry2)
source('/datadisk/git/multiplemerger-project/data_analysis_2019/ML_wrapper.R')
restable_ML_beta <- read.csv("/datadisk/git/multiplemerger-project/data_analysis_2019/restable_ML_beta.txt", sep="")
View(restable_ML_beta)
restable_ML_psi <- read.csv("/datadisk/git/multiplemerger-project/data_analysis_2019/restable_ML_psi.txt", sep="")
View(restable_ML_psi)
restable_ML_psi$PseudoLogL>restable_ML_beta$PseudoLogL
psi_good <- restable_ML_psi$PseudoLogL>restable_ML_beta$PseudoLogL
restable_ML_psi$file==restable_ML_beta$file
restable_ML_psi$file[psi_good,]
restable_ML_psi[psi_good,]
restable_ML_beta[psi_good,]
restable_ML_psi[!psi_good,]
restable_ML_psi[!psi_good[1:10],]
restable_ML_psi[!psi_good[1:6],]
restable_ML_psi[psi_good,]
restable_ML_psi[1:6,]
restable_ML_beta[1:6,]
source('/datadisk/git/multiplemerger-project/data_analysis_2019/ML_wrapper.R')
setwd("/datadisk/git/multiplemerger-project/data_analysis_2019")
source('/datadisk/git/multiplemerger-project/data_analysis_2019/ML_wrapper.R')
restable_ML_beta <- read.csv("/datadisk/git/multiplemerger-project/data_analysis_2019/restable_ML_beta.txt", sep="")
View(restable_ML_beta)
psi_good <- restable_ML_psi$PseudoLogL>restable_ML_beta$PseudoLogL
restable_ML_psi[psi_good,]
restable_ML_beta[psi_good,]
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo.R')
setwd("/datadisk/git/multiplemerger-project/data_analysis_2019")
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo.R')
switch(model1,"beta"=2,"psi"=0)
grid1$V1
summary(grid1$V1)
summary(grid1$V2)
best_params
best_params_km
sfs_names
name1 <- "Ostrea_SFS.txt"
#Load phi table
phi.table <- read.delim(paste0("phi_tables_",model1,"/phi.table.",name1),
header=FALSE)
phi.table <- phi.table[,-1]
#load observed sfs
sfs1 <- read.delim(paste0("Data_USFS-1219/Data_USFS/",name1),
header=FALSE)
#Scale observed sfs
sfs_classes <- sfs1$V1
sfs1 <- sfs1$V2
sfs1 <- sfs1/sum(sfs1)
grid1 <- read.delim(paste0("likelihood_grids_",model1,"/grid_",name1),
header=FALSE,
comment.char="#",colClasses = "numeric")
#Best fit overall
best_params <- grid1[which.max(grid1$V5),c(2,3,4)]
#Best KM+exp fit
km_lines <- which(grid1$V2==switch(model1,"beta"=2,"psi"=0))
grid_km <- grid1[km_lines,]
best_params_km <- grid_km[which.max(grid_km$V5),c(2,3,4)]
best_params
best_params_km
erat_best <- ratio_esfs_mispol(alpha1 = as.numeric(best_params[1]),
g1 = as.numeric(best_params[2]),
e1 = as.numeric(best_params[3]),
phi1 =   phi.table)
erat_best_KM <- ratio_esfs_mispol(alpha1 = as.numeric(best_params_km[1]),
g1 = as.numeric(best_params_km[2]),
e1 = as.numeric(best_params_km[3]),
phi1 =   phi.table)
erat_best
erat_best_KM
erat_best_KM - erat_best
as.numeric(best_params_km[1])
params_coal_exp
str(phi.table)
str(params_coal_exp)
phi.table[c(1,52),]
View(params_coal_exp)
as.numeric(best_params[1])
as.numeric(best_params_km[1])
points(1:length(erat_best_KM),erat_best_KM,pch=20,col="blue",
type="l",lty=1)
plot(sfs_classes,sfs1,ylim=,pch=20,
ylab=expression(E(xi[i])/sum(E(xi))),
xlab="SFS classes",main=species_names[which(files_names==name1)])
erat_best <- ratio_esfs_mispol(alpha1 = as.numeric(best_params[1]),
g1 = as.numeric(best_params[2]),
e1 = as.numeric(best_params[3]),
phi1 =   phi.table)
erat_best_KM <- ratio_esfs_mispol(alpha1 = as.numeric(best_params_km[1]),
g1 = as.numeric(best_params_km[2]),
e1 = as.numeric(best_params_km[3]),
phi1 =   phi.table)
points(1:length(erat_best_KM),erat_best_KM,pch=20,col="blue",
type="l",lty=1)
points(1:length(erat_best),erat_best,col="red",pch=20,
type="l",lty=2)
erat_best
erat_best_KM
alpha1 <- 0.05
g1 <- 0
p1 <- switch(model1,"beta"="alpha","psi"="psi")
legend("topright",legend=c("Observed",paste0("Best fit: ",p1,"=",best_params[1],
", g=",best_params[2],
", e=",best_params[3]),
paste0("Best fit KM: ",p1,"=",best_params_km[1],
", g=",best_params_km[2],
", e=",best_params_km[3])),
pch=c(20,NA,NA),col=c("black","red","blue"),lty=c(NA,1,2))
phipos <- which.min(apply(abs(params_coal_exp-c(g1,alpha1)),1,sum))
phipos
apply(abs(params_coal_exp-c(g1,alpha1)),1,sum)
coal_steps
params_coal_exp
alpha1
g1
params_coal_exp[52,]-c(g1,alpha1)
abs(params_coal_exp[52,]-c(g1,alpha1))
sum(abs(params_coal_exp[52,]-c(g1,alpha1)))
abs(params_coal_exp-c(g1,alpha1))[52,]
params_coal_exp-c(g1,alpha1)[52,]
(params_coal_exp-c(g1,alpha1))[52,]
params_coal_exp[52,]
g1
params_coal_exp
params_coal_exp - c(0,1)
head(params_coal_exp - c(0,1))
phipos <- which.min(apply(params_coal_exp,1,
function(v){sum(abs(v-c(g1,alpha1)))}))
phipos
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo.R')
restable_ML_psi[psi_good,]
restable_ML_beta[psi_good,]
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo_trafo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo_trafo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo_trafo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo_trafo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo_trafo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/post_check_pseudo.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/pics.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/pics.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/pics.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/pics.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/pics.R')
setwd("/datadisk/git/multiplemerger-project/data_analysis_2019")
#' R libraries for parallelization and reading in .xlsx
library(doMC)
library(readxl)
#' Phi table params, psi presented differently because we parallelize the phi table computation
n_psis <- 20
psi_steps <- (0:n_psis)/n_psis
rhos <- c(0,25,50)
misi <- c(0,.15,15)
prec1 <- 200
#' Number of cores for parallelization
mc1 <- 7
registerDoMC(mc1)
#' Absolute path to current folder, this is Fabian's path
home_dir <- "/datadisk/git/multiplemerger-project/data_analysis_2019/"
#' Extract file names of the SFS (extracted from Data_USFS-1019.zip, provided by Elise in Oct 2019)
#' UPDATED: uses  Data_USFS-1219.zip
sfs_names <- list.files(path = "../data_analysis_2019/Data_USFS-1219/Data_USFS/")
sfs_names
source('/datadisk/git/multiplemerger-project/data_analysis_2019/check_phitable_neg.R')
cat("Beta \n")
phitab_beta <- list.files("phi_tables_beta/")
minentry <- vector("numeric",length = length(phitab_beta))
names(minentry) <- phitab_beta
for (phit in phitab_beta){
phit2 <-  read.delim(paste0("phi_tables_beta/",phit),header=FALSE)
minentry[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
min(minentry)
cat("Psi \n")
phitab_psi <- list.files("phi_tables_psi/")
minentry2 <- vector("numeric",length = length(phitab_psi))
names(minentry2) <- phitab_psi
for (phit in phitab_psi){
phit2 <-  read.delim(paste0("phi_tables_psi/",phit),header=FALSE)
minentry2[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
summary(minentry2)
sfs_names
compute_phi[c(2,13,33)] <- FALSE
#' compute_phi regulates whether phi table need to be computed
#' (with params as above)
compute_phi <- rep(TRUE,length(sfs_names))
names(compute_phi) <- sfs_names
compute_phi[c(2,13,33)] <- FALSE
compute_phi
compute_phi <- !compute_phi
compute_phi
sfs_names[compute_phi]
version
#' TO DO: SOLVE NUMERICAL ISSUE FOR INDEPENDENT IF N>14?? (think 1483)
#' Either matrix mult. or binomial coefficient.
#'
#' maxd: maximum number of duplicate genes in one individual (-> infty)
#' d: duplication rate
#' s: Selection coefficient, selective disadvantage per copy of gene
#' nrep=1000          #number of generations
#' model either "independent" or "blueprint"
#' x: start frequencies of ducplication classes, vector of length
#'    maxd, default is only individuals with a single copy x=(1,0,0,0,...)
#' trunc1 controls how you truncate: "max" puts all duplications above maxd
#' into class maxd, whereas "cond" conditions on not reaching above maxd,
#' i.e. the truncated distribution is just rescaled to sum up to 1
iterate_gendup <- function(maxd=1000,d=0.001,s=0.0005,model1="independent",
nrep=1000,x = c(1,rep(0,maxd-1)),trunc1="max"){
y <- matrix(0, ncol = maxd, nrow = maxd) #matrix of transition probabilities
freqs = matrix(NA, ncol=nrep, nrow=maxd)
if (model1=="independent"){
for (j in 1:maxd) {               #initialise transition matrix
#k = number of duplication events in one step
for (k in j:min(maxd,2*j)) {
y[k,j] = choose(j,k-j)*d^{k-j}*(1-d)^{2*j-k}  #find number of copies in next generation by binomial sampling
}}}
if (model1=="blueprint"){
for (j in 1:maxd) {               #initialise transition matrix
for (k in c(j,min(j+1,maxd))) {
y[k,j] = d^(k-j)*(1-d)^(j-k+1)      #this is either d or (1-d)
}}
}
if (trunc1 == "max"){
rest_prob <- 1-apply(y,2,sum) #Sum up all probs allocated and find what's missing
y[maxd,] <- y[maxd,]+rest_prob
}
w_note <- rep(0,nrep)
for(i in 1:nrep) {
if (i %in% seq(50,nrep,50)){print(i)}
x <- as.vector(y %*% x)   #I usually multiply from the right; most people seem to do it the other way round...
#normalization
#for (j in 1:maxd) {
#  p=p+x[j]
#}
if (trunc1 == "cond"){
p <- sum(x)
x <- x/p}
#mean fitness
w <- 0
for (j in 1:maxd) {
w=w+x[j]*(1-s)^(j-1)
}
#selection
for (j in 1:maxd) {
x[j]=(x[j]*(1-s)^(j))/w
}
#normalization
p=0
for (j in 1:maxd) {
p=p+x[j]
}
x=x/p
freqs[,i]=x
w_note[i] <- w
}
return(list(dupfreqs=freqs,meanfitness=w_note))
}
iterate_gendup()
test1 <- iterate_gendup()
test1 <- iterate_gendup(trunc1="cond")
test1 <- iterate_gendup()
test2 <- iterate_gendup(trunc1="cond")
str(test1)
test1$meanfitness
test2$meanfitness
test2$meanfitness-test1$meanfitness
summary(test2$meanfitness-test1$meanfitness)
test1$dupfreqs
test1$dupfreqs[1000,]
test1$dupfreqs[,1000]
plot(test1$dupfreqs[,1000])
plot(test1$dupfreqs[,1000],type="l")
plot(test2$dupfreqs[,1000],type="l")
test1 <- iterate_gendup(s=0.00005)
test2 <- iterate_gendup(s=0.00005,trunc1 = "cond")
summary(test2$meanfitness-test1$meanfitness)
plot(test2$dupfreqs[,1000],type="l")
points(test1$dupfreqs[,1000],type="l",col="red")
plot(test2$dupfreqs[,1000],type="l",x=c(0,0,0,0,1,rep(0,maxd-5)))
plot(test2$dupfreqs[,1000],type="l")
test1 <- iterate_gendup(s=0.00005,x=c(0,0,0,0,1,rep(0,maxd-5)))
test1 <- iterate_gendup(s=0.00005,x=c(0,0,0,0,1,rep(0,1000-5)))
test1 <- iterate_gendup(s=0.00005,x=c(0,0,0,0,1,rep(0,1000-5)),trunc1 = "cond")
test1 <- iterate_gendup(s=0.00005,x=c(0,0,0,0,1,rep(0,1000-5)))
test2 <- iterate_gendup(s=0.00005,x=c(0,0,0,0,1,rep(0,1000-5)),trunc1 = "cond")
summary(test2$meanfitness-test1$meanfitness)
plot(test2$dupfreqs[,1000],type="l")
points(test1$dupfreqs[,1000],type="l",col="red")
summary(test1$dupfreqs[,1000]-test2$dupfreqs[,1000])
apply(test1$dupfreqs,1,sum)
apply(test1$dupfreqs,2,sum)
apply(test2$dupfreqs,2,sum)
cat("Beta \n")
phitab_beta <- list.files("phi_tables_beta/")
minentry <- vector("numeric",length = length(phitab_beta))
names(minentry) <- phitab_beta
for (phit in phitab_beta){
phit2 <-  read.delim(paste0("phi_tables_beta/",phit),header=FALSE)
minentry[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
min(minentry)
cat("Psi \n")
phitab_psi <- list.files("phi_tables_psi/")
minentry2 <- vector("numeric",length = length(phitab_psi))
names(minentry2) <- phitab_psi
for (phit in phitab_psi){
phit2 <-  read.delim(paste0("phi_tables_psi/",phit),header=FALSE)
minentry2[phit] <- min(phit2)
cat(phit, ": Min entry = ",min(phit2),"\n")
}
summary(minentry2)
source('/datadisk/git/multiplemerger-project/data_analysis_2019/ML_wrapper.R')
source('/datadisk/git/multiplemerger-project/data_analysis_2019/ML_wrapper.R')
setwd("/datadisk/git/multiplemerger-project/data_analysis_2019")
source('/datadisk/git/multiplemerger-project/data_analysis_2019/ML_wrapper.R')
